---
- hosts: localhost
  tasks:
  - name: Create a longhorn-system namespace
    community.kubernetes.k8s:
      name: longhorn-system
      api_version: v1
      kind: Namespace
      state: present
  - name: Create longhorn secret
    ansible.builtin.shell: "(echo holden:$(openssl passwd -stdin -apr1 <<< {{longhorn_pw}}) >> auth); kubectl get secret -n longhorn-system basic-auth || kubectl -n longhorn-system create secret generic basic-auth --from-file=auth"
    args:
      executable: /bin/bash
  - name: Create a minio ns
    community.kubernetes.k8s:
      name: minio
      api_version: v1
      kind: Namespace
      state: present
  - name: Create a dask ns
    community.kubernetes.k8s:
      name: dask
      api_version: v1
      kind: Namespace
      state: present
  - name: Create a ray ns
    community.kubernetes.k8s:
      name: ray
      api_version: v1
      kind: Namespace
      state: present
  - name: Create a metallb-system namespace
    community.kubernetes.k8s:
      name: metallb-system
      api_version: v1
      kind: Namespace
      state: present
  - name: Create a jhub namespace
    community.kubernetes.k8s:
      name: jhub
      api_version: v1
      kind: Namespace
      state: present
  - name: Create a spacebeaver namespace
    community.kubernetes.k8s:
      name: spacebeaver
      api_version: v1
      kind: Namespace
      state: present
# Extra ns for mika
  - name: Create a mika namespace
    community.kubernetes.k8s:
      name: mika
      api_version: v1
      kind: Namespace
      state: present
  - name: Install metallb
    ansible.builtin.shell: "kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.6/manifests/namespace.yaml; sleep 1; kubectl apply -f /home/holden/repos/colo-scripts/metallb.yaml; sleep 1"
  - name: Create spacebeaver secrets
    community.kubernetes.k8s:
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: spacebeaver-secret
          namespace: spacebeaver
        stringData:
          STRIPE_LIVE_SECRET_KEY: "{{SPACEBEAVER_STRIPE_LIVE_SECRET_KEY}}"
          STRIPE_LIVE_PUBLIC_KEY: "{{SPACEBEAVER_STRIPE_LIVE_PUBLIC_KEY}}"
          SECRET_KEY: "{{SPACEBEAVER_DJANGO_SECRET_KEY}}"
          DATA_NETLOC: "postgresql://spacebeaver:{{spacebeaver_db_pw}}@nani.pigscanfly.ca/spacebeaver"
      state: present
  - name: Create spacebeaver config
    community.kubernetes.k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: spacebeaver-web-config
          namespace: spacebeaver
        type: Opaque
        data:
          DOMAIN: "spacebeaver.com"
          STATIC_URL: "/static/"
          MEDIA_URL: "/media/"
      state: present    
  - name: Create metallb secret
    community.kubernetes.k8s:
      definition:
        apiVersion: v1
        kind: Secret

        metadata:
          name: memberlist
          namespace: metallb-system

        type: Opaque

        data:
          secretkey: "{{metallb_key}}"
      state: present
  - name: Configure metallb
    community.kubernetes.k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          namespace: metallb-system
          name: config
        data:
          config: |
            peers:
              - peer-address: 64.71.157.129
                peer-asn: 399306
                my-asn: 399306
                password: "{{metallb_bgp_pw}}"
                node-selectors:
                - match-labels:
                    svccontroller.k3s.cattle.io/enablelb: true
            address-pools:
            - name: default
              protocol: bgp
              addresses:
              - 23.177.16.200/26
      state: present
  - name: Install helm
    ansible.builtin.shell: "curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash"
    args:
      creates: /usr/local/bin/helm
    become: true
  - name: Add bitnami chart
    kubernetes.core.helm_repository:
      name: bitnami
      repo_url: "https://charts.bitnami.com/bitnami"
  - name: Add MinIO operator chart
    kubernetes.core.helm_repository:
      name: minio-operator
      repo_url: "https://operator.min.io/"
  - name: Add legacy MinIO chart
    kubernetes.core.helm_repository:
      name: minio
      repo_url: "https://charts.min.io/"
  - name: Add bitnami
    kubernetes.core.helm_repository:
      name: bitnami
      repo_url: "https://charts.bitnami.com/bitnami"
  - name: Add Traefik chart
    kubernetes.core.helm_repository:
      name: traefik
      repo_url: "https://helm.traefik.io/traefik/"
  - name: Add Rook Ceph chart
    kubernetes.core.helm_repository:
      name: rook-release
      repo_url: "https://charts.rook.io/release"
  - name: Add longhorn chart
    kubernetes.core.helm_repository:
      name: longhorn
      repo_url: "https://charts.longhorn.io"
  - name: Add cert-manager chart
    kubernetes.core.helm_repository:
      name: jetstack
      repo_url: "https://charts.jetstack.io"
  - name: Deploy cert manager
    kubernetes.core.helm:
      name: cert-manager
      chart_ref: "jetstack/cert-manager"
      release_namespace: cert-manager
      chart_version: v1.7.1
      create_namespace: true
      values:
        installCRDs: true
  - name: Configure cert manager issuer
    ansible.builtin.shell: "kubectl apply -f /home/holden/repos/scalingpythonml/certificate-stuff/letsencrypt-issuer-production.yaml"
  - name: Configure traefik-system ns
    community.kubernetes.k8s:
      kind: namespace
      name: traefik-system
      state: present
  - name: Configure traefik-certs volume
    community.kubernetes.k8s:
      definition:
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          namespace: traefik-system
          name: traefik-certs
        spec:
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: 512m
          storageClassName: longhorn
      state: present
  - name: Deploy trafeik
    kubernetes.core.helm:
      name: traefik
      chart_ref: traefik/traefik
      release_namespace: traefik-system
      chart_version: v10.19.5
      create_namespace: true
      values:
# To configure how we want things to go
        additionalArguments:
          - "--log.level=INFO"
#          - "--providers.kubernetesIngress.ingressClass=traefik-cert-manager"
          - "--global.checknewversion"
          - "--global.sendanonymoususage"
#          - "--entryPoints.traefik.address=:9000"
#          - "--api.dashboard=true"
#          - "--ping=true"
# If we were to try and avoid cert-manager but it's being weird.
          - "--certificatesresolvers.le.acme.storage=/data/acme.json"
          - "--certificatesresolvers.le.acme.tlschallenge=true"
          - "--certificatesresolvers.le.acme.email=holden@pigscanfly.ca"
          - "--certificatesresolvers.le.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
#          - "--certificatesresolvers.le.acme.httpchallenge=true"
#          - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
#          - "--entryPoints.web.forwardedHeaders.trustedIPs=127.0.0.1/32,10.42.4.0/8"
#          - "--entryPoints.websecure.forwardedHeaders.trustedIPs=127.0.0.1/32,10.42.4.0/8"
#          - "--entryPoints.web.proxyProtocol.trustedIPs=127.0.0.1/32,10.42.4.0/8"
#          - "--entryPoints.websecure.proxyProtocol.trustedIPs=127.0.0.1/32,10.42.4.0/8"
        persistence:
          enable: true
          accessMode: ReadWriteMany
          existingClaim: "traefik-certs"
          size: 512m
          path: "/data"
        ingressClass:
          enabled: true
          isDefaultClass: true
        service:
          spec:
            loadBalancerIP: 23.177.16.200
            externalTrafficPolicy: Local
        # See https://community.traefik.io/t/traefik-v2-helm-v3-ingressroute-error-getting-validation-data-lets-encrypt/6262
        # (needed for traefik to work with letsencrypt and storing certs in /data)
        podSecurityContext:
          fsGroup: null
# longhorn gets sad in any NS other than longhorn-system :/
  - name: Deploy longhorn
    kubernetes.core.helm:
      name: longhorn
      chart_ref: longhorn/longhorn
      release_namespace: longhorn-system
      create_namespace: true
      values:
        defaultSettings:
          defaultDataPath: /storage
# See https://rpi4cluster.com/k3s/k3s-storage-setting/
  - name: Deploy minio (non operator)
    kubernetes.core.helm:
      name: minio
      chart_ref: minio/minio
      release_namespace: minio
      wait_timeout: 30m
      values:
        image:
          repository: quay.io/minio/minio
          tag: RELEASE.2022-04-09T15-09-52Z
          pullPolicy: IfNotPresent
        mcImage:
          repository: quay.io/minio/mc
          tag: RELEASE.2022-04-07T21-43-27Z
          pullPolicy: IfNotPresent
        rootUser: "{{minio_root}}"
        rootPassword: "{{minio_pw}}"
        users:
          - accessKey: "{{minio_holden_access}}"
            secretKey: "{{minio_holden_secret}}"
            policy: consoleAdmin
          - accessKey: "{{minio_mika_access}}"
            secretKey: "{{minio_mika_secret}}"
            policy: consoleAdmin
        persistence:
          storageClass: local-path
          size: 100Gi
        buckets:
          - name: holden
            policy: none
            purge: false
          - name: mika
            policy: none
            purge: false
          - name: public
            policy: public
            purge: false
        mode: standalone
  - name: Create minio secret for Jupyter
    community.kubernetes.k8s:
      definition:
        apiVersion: v1
        kind: Secret

        metadata:
          name: minio
          namespace: jhub

        type: Opaque

        stringData:
          accessKey: "{{minio_accesskey}}"
          secretKey: "{{minio_holden_secret}}"
      state: present
  - name: Create a namespace for Spark
    community.kubernetes.k8s:
      name: spark
      api_version: v1
      kind: Namespace
      state: present
  - name: Create a SA for holdenk
    community.kubernetes.k8s:
      name: holdenk
      namespace: jhub
      api_version: v1
      kind: serviceaccount
      state: present
  - name: Create a role binding dask
    community.kubernetes.k8s:
      name: jhub-holdenk-rb-dask
      namespace: dask
      definition:
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: edit
        subjects:
        - kind: ServiceAccount
          name: holdenk
          namespace: jhub
      api_version: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      state: present
  - name: Create a role binding spark
    community.kubernetes.k8s:
      name: jhub-holdenk-rb-spark
      namespace: dask
      definition:
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: edit
        subjects:
        - kind: ServiceAccount
          name: holdenk
          namespace: jhub
      api_version: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      state: present
  - name: Create a role binding holdenk ray
    community.kubernetes.k8s:
      name: jhub-holdenk-rb-ray
      namespace: ray
      definition:
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: edit
        subjects:
        - kind: ServiceAccount
          name: holdenk
          namespace: jhub
      api_version: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      state: present
# Mika role binding
  - name: Create a SA for mkimmins
    community.kubernetes.k8s:
      name: mkimmins
      namespace: jhub
      api_version: v1
      kind: serviceaccount
      state: present
  - name: Create a role binding mika
    community.kubernetes.k8s:
      name: jhub-mika-rb
      namespace: mika
      definition:
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: edit
        subjects:
        - kind: ServiceAccount
          name: mkimmins
          namespace: jhub
      api_version: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      state: present
#Generic
  - name: Create a SA for Spark
    community.kubernetes.k8s:
      name: spark
      namespace: spark
      api_version: v1
      kind: serviceaccount
      state: present
  - name: Create a role for Spark
    community.kubernetes.k8s:
      name: spark-rb
      namespace: spark
      definition:
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: edit
        subjects:
        - kind: ServiceAccount
          name: spark
          namespace: spark
      api_version: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      state: present
  - name: Create a greenIOT ns
    community.kubernetes.k8s:
      name: greeniot
      api_version: v1
      kind: Namespace
      state: present
  - name: Create greenIOT DB secrets
    community.kubernetes.k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap

        metadata:
          name: dbconfig
          namespace: greeniot
        data:
          config: |
            [client]
            port=3306
            user=opengreeniot
            password={{opengreeniot_db_pw}}
            host=nani.pigscanfly.ca
            database=opengreeniot
      state: present
  - name: Create greenIOT web secrets
    community.kubernetes.k8s:
      definition:
        apiVersion: v1
        kind: Secret

        metadata:
          name: websecrets
          namespace: greeniot

        type: Opaque

        stringData:
          SECRET_KEY: "{{django_secret_key}}"
          DEFAULT_FROM_EMAIL: "{{django_email_from_user}}"
          EMAIL_HOST: "{{django_email_host}}"
          EMAIL_HOST_USER: "{{django_email_host_user}}"
          EMAIL_HOST_PASSWORD: "{{django_email_host_password}}"
          STRIPE_SECRET_KEY: "{{django_stripe_secret_key}}"
          STRIPE_PUBLISHABLE_KEY: "{{django_stripe_publishable_key}}"
          STRIPE_PLAN_MONTHLY_ID: "{{django_stripe_plan_monthly_id}}"
          STRIPE_PLAN_ANNUAL_ID: "{{django_stripe_plan_annual_id}}"
          STRIPE_WEBHOOK_SIGNING_KEY: "{{django_stripe_webhook_signing_key}}"
      state: present
  - name: Create greenIOT web deployment backend
    community.kubernetes.k8s:
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: web-backend
          namespace: greeniot
        spec:
          selector:
            matchLabels:
              run: web-backend
          replicas: 2
          template:
            metadata:
              labels:
                app: web-backend
                run: web-backend
            spec:
              volumes:
                - name: sql-config
                  configMap:
                    name: dbconfig
              containers:
              - name: server
                image: holdenk/green-iot-web:latest
                pullPolicy: Always
                env:
                  - name: SECRET_KEY
                    valueFrom:
                      secretKeyRef:
                        name: websecrets
                        key: SECRET_KEY
                  - name: DEFAULT_FROM_EMAIL
                    valueFrom:
                      secretKeyRef:
                        name: websecrets
                        key: DEFAULT_FROM_EMAIL
                  - name: EMAIL_HOST
                    valueFrom:
                      secretKeyRef:
                        name: websecrets
                        key: EMAIL_HOST
                  - name: EMAIL_HOST_USER
                    valueFrom:
                      secretKeyRef:
                        name: websecrets
                        key: EMAIL_HOST_USER
                  - name: EMAIL_HOST_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: websecrets
                        key: EMAIL_HOST_PASSWORD
                  - name: STRIPE_SECRET_KEY
                    valueFrom:
                      secretKeyRef:
                        name: websecrets
                        key: STRIPE_SECRET_KEY
                  - name: STRIPE_PUBLISHABLE_KEY
                    valueFrom:
                      secretKeyRef:
                        name: websecrets
                        key: STRIPE_PUBLISHABLE_KEY
                  - name: STRIPE_PLAN_MONTHLY_ID
                    valueFrom:
                      secretKeyRef:
                        name: websecrets
                        key: STRIPE_PLAN_MONTHLY_ID
                  - name: STRIPE_PLAN_ANNUAL_ID
                    valueFrom:
                      secretKeyRef:
                        name: websecrets
                        key: STRIPE_PLAN_ANNUAL_ID
                  - name: STRIPE_WEBHOOK_SIGNING_KEY
                    valueFrom:
                      secretKeyRef:
                        name: websecrets
                        key: STRIPE_WEBHOOK_SIGNING_KEY
                ports:
                - containerPort: 80
                resources:
                  limits:
                    cpu: 5
                    memory: 10G
                  requests:
                    cpu: 1
                    memory: 1G
                volumeMounts:
                  - mountPath: "/opt/app/my.cnf"
                    name: sql-config
                    readOnly: true
                    subPath: config
      state: present
  - name: Create greenIOT LB service
    community.kubernetes.k8s:
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: iot-web-service
          namespace: greeniot
        spec:
          selector:
            app: web-backend
          type: ClusterIP
          ports:
          - name: http
            port: 80
            targetPort: 80
            protocol: TCP
  - name: Create greenIOT Ingress http
    community.kubernetes.k8s:
      definition:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: iot-web-ingress
          namespace: greeniot
          annotations:
            kubernetes.io/ingress.class: traefik
            traefik.ingress.kubernetes.io/router.entrypoints: web
        spec:
          rules:
          - host: "*.opengreeniot.com"
            http:
              paths:
              - path: "/"
                pathType: Prefix
                backend:
                  service:
                    name: iot-web-service
                    port:
                      number: 80
  - name: Create greenIOT Ingress https
    community.kubernetes.k8s:
      definition:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: iot-web-ingress-https
          namespace: greeniot
          annotations:
            kubernetes.io/ingress.class: traefik
            traefik.ingress.kubernetes.io/router.tls.certresolver: le
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.tls: "true"
          spec:
            tls:
              - hosts:
                  - www.opengreeniot.com
                  - "*.opengreeniot.com"
            rules:
              - host: "*.opengreeniot.com"
                http:
                  paths:
                    - path: "/"
                      pathType: Prefix
                      backend:
                        service:
                          name: iot-web-service
                        port:
                          number: 80
  - name: Create longhorn auth middleware
    community.kubernetes.k8s:
      definition:
        apiVersion: traefik.containo.us/v1alpha1
        kind: Middleware
        metadata:
          name: lhauth
          namespace: longhorn-system
        spec:
          basicAuth:
            secret: basic-auth
  - name: Create longhorn auth middleware
    community.kubernetes.k8s:
      definition:
        apiVersion: traefik.containo.us/v1alpha1
        kind: Middleware
        metadata:
          name: svc-longhorn-headers
          namespace: longhorn-system
        spec:
          headers:
            customRequestHeaders:
              X-Forwarded-Proto: "https"
  - name: minio middleware
    community.kubernetes.k8s:
      definition:
        apiVersion: traefik.containo.us/v1alpha1
        kind: Middleware
        metadata:
          name: minio-middle
          namespace: minio
        spec:
          headers:
            hostsProxyHeaders:
              - x-forwarded-for
              - x-forwarded-host
              - x-real-ip
              - host
            sslProxyHeaders:
              X-Forwarded-Proto: "https"
  - name: Force https
    community.kubernetes.k8s:
      definition:
        apiVersion: traefik.containo.us/v1alpha1
        kind: Middleware
        metadata:
          name: https-plz
          namespace: default
        spec:
          redirectScheme:
            scheme: https
            permanent: true
  - name: Create longhorn Ingress https
    community.kubernetes.k8s:
      definition:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: longhorn-ingress
          namespace: longhorn-system
          annotations:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.tls.certresolver: le
            traefik.ingress.kubernetes.io/router.tls: "true"       
            traefik.ingress.kubernetes.io/router.middlewares: longhorn-system-svc-longhorn-headers@kubernetescrd
            traefik.ingress.kubernetes.io/router.middlewares: default-https-plz@kubernetescrd
            kubernetes.io/ingress.class: traefik
            # type of authentication
            traefik.ingress.kubernetes.io/router.middlewares: longhorn-system-lhauth@kubernetescrd
        spec:
          tls:
          - hosts:
              - longhorn.pigscanfly.ca
          rules:
            - host: "longhorn.pigscanfly.ca"
              http:
                paths:
                - pathType: Prefix
                  path: "/"
                  backend:
                    service:
                      name: longhorn-frontend
                      port:
                        number: 80
  - name: Create minio Ingress https
    community.kubernetes.k8s:
      definition:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: minio-ingress
          namespace: minio
          annotations:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.middlewares: default-https-plz@kubernetescrd
            traefik.ingress.kubernetes.io/router.middlewares: minio-minio-middle@kubernetescrd
            traefik.ingress.kubernetes.io/router.tls: "true"
            traefik.ingress.kubernetes.io/router.tls.certresolver: le
            kubernetes.io/ingress.class: traefik
        spec:
          tls:
          - hosts:
              - minio.pigscanfly.ca
          rules:
            - host: "minio.pigscanfly.ca"
              http:
                paths:
                - pathType: Prefix
                  path: "/"
                  backend:
                    service:
                      name: minio-console
                      port:
                        number: 9001
  - name: Create minio Ingress http
    community.kubernetes.k8s:
      definition:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: minio-rdr-ingress
          namespace: minio
          annotations:
            traefik.ingress.kubernetes.io/router.entrypoints: web
            traefik.ingress.kubernetes.io/router.middlewares: default-https-plz@kubernetescrd
            kubernetes.io/ingress.class: traefik
        spec:
          rules:
            - host: "minio.pigscanfly.ca"
              http:
                paths:
                - pathType: Prefix
                  path: "/"
                  backend:
                    service:
                      name: minio
                      port:
                        number: 9000
